# This file has been autogenerated by the pywayland scanner

# Copyright © 2008-2011 Kristian Høgsberg
# Copyright © 2010-2011 Intel Corporation
# Copyright © 2012-2013 Collabora, Ltd.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice (including the
# next paragraph) shall be included in all copies or substantial
# portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from __future__ import annotations

from pywayland.protocol_core import (
    Argument,
    ArgumentType,
    Global,
    Interface,
    Proxy,
    Resource,
)

from pywayland.protocol.wayland import WlSeat
from .zwlr_data_control_device_v1 import ZwlrDataControlDeviceV1
from .zwlr_data_control_source_v1 import ZwlrDataControlSourceV1


class ZwlrDataControlManagerV1(Interface):
    """Manager to control data devices

    This interface is a manager that allows creating per-seat data device
    controls.
    """

    name = "zwlr_data_control_manager_v1"
    version = 2


class ZwlrDataControlManagerV1Proxy(Proxy[ZwlrDataControlManagerV1]):
    interface = ZwlrDataControlManagerV1

    @ZwlrDataControlManagerV1.request(
        Argument(ArgumentType.NewId, interface=ZwlrDataControlSourceV1),
    )
    def create_data_source(self) -> Proxy[ZwlrDataControlSourceV1]:
        """Create a new data source

        Create a new data source.

        :returns:
            :class:`~pywayland.protocol.wayland.ZwlrDataControlSourceV1` --
            data source to create
        """
        id = self._marshal_constructor(0, ZwlrDataControlSourceV1)
        return id

    @ZwlrDataControlManagerV1.request(
        Argument(ArgumentType.NewId, interface=ZwlrDataControlDeviceV1),
        Argument(ArgumentType.Object, interface=WlSeat),
    )
    def get_data_device(self, seat: WlSeat) -> Proxy[ZwlrDataControlDeviceV1]:
        """Get a data device for a seat

        Create a data device that can be used to manage a seat's selection.

        :param seat:
        :type seat:
            :class:`~pywayland.protocol.wayland.WlSeat`
        :returns:
            :class:`~pywayland.protocol.wayland.ZwlrDataControlDeviceV1`
        """
        id = self._marshal_constructor(1, ZwlrDataControlDeviceV1, seat)
        return id

    @ZwlrDataControlManagerV1.request()
    def destroy(self) -> None:
        """Destroy the manager

        All objects created by the manager will still remain valid, until their
        appropriate destroy request has been called.
        """
        self._marshal(2)
        self._destroy()


class ZwlrDataControlManagerV1Resource(Resource):
    interface = ZwlrDataControlManagerV1


class ZwlrDataControlManagerV1Global(Global):
    interface = ZwlrDataControlManagerV1


ZwlrDataControlManagerV1._gen_c()
ZwlrDataControlManagerV1.proxy_class = ZwlrDataControlManagerV1Proxy
ZwlrDataControlManagerV1.resource_class = ZwlrDataControlManagerV1Resource
ZwlrDataControlManagerV1.global_class = ZwlrDataControlManagerV1Global
