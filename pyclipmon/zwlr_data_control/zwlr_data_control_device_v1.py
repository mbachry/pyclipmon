# This file has been autogenerated by the pywayland scanner

# Copyright © 2008-2011 Kristian Høgsberg
# Copyright © 2010-2011 Intel Corporation
# Copyright © 2012-2013 Collabora, Ltd.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice (including the
# next paragraph) shall be included in all copies or substantial
# portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from __future__ import annotations

import enum

from pywayland.protocol_core import (
    Argument,
    ArgumentType,
    Global,
    Interface,
    Proxy,
    Resource,
)

from .zwlr_data_control_offer_v1 import ZwlrDataControlOfferV1
from .zwlr_data_control_source_v1 import ZwlrDataControlSourceV1


class ZwlrDataControlDeviceV1(Interface):
    """Manage a data device for a seat

    This interface allows a client to manage a seat's selection.

    When the seat is destroyed, this object becomes inert.
    """

    name = "zwlr_data_control_device_v1"
    version = 2

    class error(enum.IntEnum):
        used_source = 1


class ZwlrDataControlDeviceV1Proxy(Proxy[ZwlrDataControlDeviceV1]):
    interface = ZwlrDataControlDeviceV1

    @ZwlrDataControlDeviceV1.request(
        Argument(ArgumentType.Object, interface=ZwlrDataControlSourceV1, nullable=True),
    )
    def set_selection(self, source: ZwlrDataControlSourceV1 | None) -> None:
        """Copy data to the selection

        This request asks the compositor to set the selection to the data from
        the source on behalf of the client.

        The given source may not be used in any further set_selection or
        set_primary_selection requests. Attempting to use a previously used
        source is a protocol error.

        To unset the selection, set the source to NULL.

        :param source:
        :type source:
            :class:`~pywayland.protocol.wayland.ZwlrDataControlSourceV1` or `None`
        """
        self._marshal(0, source)

    @ZwlrDataControlDeviceV1.request()
    def destroy(self) -> None:
        """Destroy this data device

        Destroys the data device object.
        """
        self._marshal(1)
        self._destroy()

    @ZwlrDataControlDeviceV1.request(
        Argument(ArgumentType.Object, interface=ZwlrDataControlSourceV1, nullable=True),
        version=2,
    )
    def set_primary_selection(self, source: ZwlrDataControlSourceV1 | None) -> None:
        """Copy data to the primary selection

        This request asks the compositor to set the primary selection to the
        data from the source on behalf of the client.

        The given source may not be used in any further set_selection or
        set_primary_selection requests. Attempting to use a previously used
        source is a protocol error.

        To unset the primary selection, set the source to NULL.

        The compositor will ignore this request if it does not support primary
        selection.

        :param source:
        :type source:
            :class:`~pywayland.protocol.wayland.ZwlrDataControlSourceV1` or `None`
        """
        self._marshal(2, source)


class ZwlrDataControlDeviceV1Resource(Resource):
    interface = ZwlrDataControlDeviceV1

    @ZwlrDataControlDeviceV1.event(
        Argument(ArgumentType.NewId, interface=ZwlrDataControlOfferV1),
    )
    def data_offer(self, id: ZwlrDataControlOfferV1) -> None:
        """Introduce a new wlr_data_control_offer

        The data_offer event introduces a new wlr_data_control_offer object,
        which will subsequently be used in either the
        wlr_data_control_device.selection event (for the regular clipboard
        selections) or the wlr_data_control_device.primary_selection event (for
        the primary clipboard selections). Immediately following the
        wlr_data_control_device.data_offer event, the new data_offer object
        will send out wlr_data_control_offer.offer events to describe the MIME
        types it offers.

        :param id:
        :type id:
            :class:`~pywayland.protocol.wayland.ZwlrDataControlOfferV1`
        """
        self._post_event(0, id)

    @ZwlrDataControlDeviceV1.event(
        Argument(ArgumentType.Object, interface=ZwlrDataControlOfferV1, nullable=True),
    )
    def selection(self, id: ZwlrDataControlOfferV1 | None) -> None:
        """Advertise new selection

        The selection event is sent out to notify the client of a new
        wlr_data_control_offer for the selection for this device. The
        wlr_data_control_device.data_offer and the wlr_data_control_offer.offer
        events are sent out immediately before this event to introduce the data
        offer object. The selection event is sent to a client when a new
        selection is set. The wlr_data_control_offer is valid until a new
        wlr_data_control_offer or NULL is received. The client must destroy the
        previous selection wlr_data_control_offer, if any, upon receiving this
        event.

        The first selection event is sent upon binding the
        wlr_data_control_device object.

        :param id:
        :type id:
            :class:`~pywayland.protocol.wayland.ZwlrDataControlOfferV1` or `None`
        """
        self._post_event(1, id)

    @ZwlrDataControlDeviceV1.event()
    def finished(self) -> None:
        """This data control is no longer valid

        This data control object is no longer valid and should be destroyed by
        the client.
        """
        self._post_event(2)

    @ZwlrDataControlDeviceV1.event(
        Argument(ArgumentType.Object, interface=ZwlrDataControlOfferV1, nullable=True),
        version=2,
    )
    def primary_selection(self, id: ZwlrDataControlOfferV1 | None) -> None:
        """Advertise new primary selection

        The primary_selection event is sent out to notify the client of a new
        wlr_data_control_offer for the primary selection for this device. The
        wlr_data_control_device.data_offer and the wlr_data_control_offer.offer
        events are sent out immediately before this event to introduce the data
        offer object. The primary_selection event is sent to a client when a
        new primary selection is set. The wlr_data_control_offer is valid until
        a new wlr_data_control_offer or NULL is received. The client must
        destroy the previous primary selection wlr_data_control_offer, if any,
        upon receiving this event.

        If the compositor supports primary selection, the first
        primary_selection event is sent upon binding the
        wlr_data_control_device object.

        :param id:
        :type id:
            :class:`~pywayland.protocol.wayland.ZwlrDataControlOfferV1` or `None`
        """
        self._post_event(3, id)


class ZwlrDataControlDeviceV1Global(Global):
    interface = ZwlrDataControlDeviceV1


ZwlrDataControlDeviceV1._gen_c()
ZwlrDataControlDeviceV1.proxy_class = ZwlrDataControlDeviceV1Proxy
ZwlrDataControlDeviceV1.resource_class = ZwlrDataControlDeviceV1Resource
ZwlrDataControlDeviceV1.global_class = ZwlrDataControlDeviceV1Global
